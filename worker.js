const users = {
  admin: 'adminpass',
  user: 'userpass'
};

// Basic sample data so the scored page isn't empty if the CSV fetch fails.
const demoGrants = [
  { Name: 'Community Garden', Amount: '5000', 'Weighted Score': '72' },
  { Name: 'STEM Program', Amount: '12000', 'Weighted Score': '88' },
  { Name: 'Art Outreach', Amount: '8000', 'Weighted Score': '81' }
];

// URL hosting the scored CSV output generated by the Python wrangler.
// The file is fetched at login so authenticated users can view real data
// instead of the hard-coded demo grants.
const CSV_URL =
  'https://raw.githubusercontent.com/asiakay/grant-manager-tool-demo/main/out/master.csv';

async function fetchGrantsFromCsv() {
  try {
    const resp = await fetch(CSV_URL);
    if (!resp.ok) {
      return demoGrants;
    }
    const text = await resp.text();
    const lines = text.trim().split(/\r?\n/);
    const headers = lines.shift().split(',');
    const grants = lines.map((line) => {
      const values = line.split(',');
      return Object.fromEntries(headers.map((h, i) => [h, values[i]]));
    });
    return grants.length ? grants : demoGrants;
  } catch (err) {
    return demoGrants;
  }
}

function loginPage() {
  return `<!DOCTYPE html>
<html lang="en">
<head><meta charset="UTF-8"><title>Grant Login</title></head>
<body>
  <h1>Grant Wrangler Demo</h1>
  <form method="POST" action="/login">
    <label>Username <input name="username" /></label><br />
    <label>Password <input type="password" name="password" /></label><br />
    <button type="submit">Login</button>
  </form>
</body>
</html>`;
}

// Render a simple table (and optional bar chart) of scored grant data.
// The page name now reflects that it specifically visualizes the scored CSV
// rather than being a generic dashboard.
function scoredPage(grants) {
  const headers = grants.length ? Object.keys(grants[0]) : [];
  const headerRow = headers.map((h) => `<th>${h}</th>`).join('');
  const rows = grants
    .map(
      (g) =>
        `<tr>${headers.map((h) => `<td>${g[h] ?? ''}</td>`).join('')}</tr>`
    )
    .join('');

  let chartBlock = '';
  if (headers.includes('Name') && headers.includes('Weighted Score')) {
    const chartData = {
      labels: grants.map((g) => g['Name']),
      data: grants.map((g) => Number(g['Weighted Score']) || 0)
    };
    chartBlock = `
    <h2>Weighted Scores</h2>
    <canvas id="fundingChart"></canvas>
    <script>
      const ctx = document.getElementById('fundingChart').getContext('2d');
      const data = ${JSON.stringify(chartData)};
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.labels,
          datasets: [{
            label: 'Weighted Score',
            data: data.data,
            backgroundColor: 'rgba(54, 162, 235, 0.5)'
          }]
        },
        options: { scales: { y: { beginAtZero: true } } }
      });
    <\/script>`;
  }

  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Scored Grants</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>Scored Grants</h1>
  <a href="/logout">Logout</a>
  <table border="1">
    <tr>${headerRow}</tr>
    ${rows}
  </table>
  ${chartBlock}
</body>
</html>`;
}

export default {
  async fetch(request) {
    const url = new URL(request.url);
    const cookie = request.headers.get('Cookie') || '';
    const loggedIn = cookie.includes('session=active');

    if (url.pathname === '/login' && request.method === 'POST') {
      const form = await request.formData();
      const user = form.get('username');
      const pass = form.get('password');
      if (users[user] === pass) {
        return new Response('', {
          status: 302,
          headers: { 'Set-Cookie': 'session=active; Path=/', Location: '/scored' }
        });
      }
      return new Response('Unauthorized', { status: 401 });
    }

    if (url.pathname === '/dashboard') {
      if (!loggedIn) {
        return new Response('', { status: 302, headers: { Location: '/' } });
      }
      const grants = await fetchGrantsFromCsv();
      return new Response(scoredPage(grants), {
        headers: { 'content-type': 'text/html; charset=UTF-8' }
      });
    }

    if (url.pathname === '/scored') {
      if (!loggedIn) {
        return new Response('', { status: 302, headers: { Location: '/' } });
      }
      const grants = await fetchGrantsFromCsv();
      return new Response(scoredPage(grants), {
        headers: { 'content-type': 'text/html; charset=UTF-8' }
      });
    }

    if (url.pathname === '/logout') {
      return new Response('', {
        status: 302,
        headers: {
          'Set-Cookie': 'session=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT',
          Location: '/'
        }
      });
    }

    return new Response(loginPage(), {
      headers: { 'content-type': 'text/html; charset=UTF-8' }
    });
  }
};

